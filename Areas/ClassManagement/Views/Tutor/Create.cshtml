@model SchoolManager.Models.TutorModel
@{
    ViewBag.Title = "Create - Tutor";
}

<h2>Create Tutor</h2>

@{Html.BeginForm("Create", "Tutor", FormMethod.Post, new { @class = "form-horizontal" });}
@Html.HiddenFor(t => t.Id)

<div class="form-group @if (!ViewData.ModelState.IsValidField("FirstName")) { @Html.Raw("has-error") ; }">
    @Html.LabelFor(t => t.FirstName, new { @class = "col-sm-2 control-label" })
    <div class="col-sm-10 controls">
        <div class="row">
            <div class="col-sm-8">
                @Html.TextBoxFor(t => t.FirstName, new { @class = "form-control" })
            </div>
            <div class="col-sm-4">
                @Html.ValidationMessageFor(t => t.FirstName, null, new { @class = "help-block" })
            </div>
        </div>
    </div>
</div>

<div class="form-group @if (!ViewData.ModelState.IsValidField("LastName")) { @Html.Raw("has-error") ; }">
    @Html.LabelFor(t => t.LastName, new { @class = "col-sm-2 control-label" })
    <div class="col-sm-10 controls">
        <div class="row">
            <div class="col-sm-8">
                @Html.TextBoxFor(t => t.LastName, new { @class = "form-control" })
            </div>
            <div class="col-sm-4">
                @Html.ValidationMessageFor(t => t.LastName, null, new { @class = "help-block" })
            </div>
        </div>
    </div>
</div>


<div class="form-group @if (!ViewData.ModelState.IsValidField("Address")) { @Html.Raw("has-error") ; }">
    @Html.LabelFor(t => t.Address, new { @class = "col-sm-2 control-label" })
    <div class="col-sm-10 controls">
        <div class="row">
            <div class="col-sm-8">
                @Html.TextBoxFor(t => t.Address, new { @class = "form-control" })
            </div>
            <div class="col-sm-4">
                @Html.ValidationMessageFor(t => t.Address, null, new { @class = "help-block" })
            </div>
        </div>
    </div>
</div>

<div class="form-group @if (!ViewData.ModelState.IsValidField("PostCode")) { @Html.Raw("has-error") ; }">
    @Html.LabelFor(t => t.PostCode, new { @class = "col-sm-2 control-label" })
    <div class="col-sm-10 controls">
        <div class="row">
            <div class="col-sm-8">
                @Html.TextBoxFor(t => t.PostCode, new { @class = "form-control" })
            </div>
            <div class="col-sm-4">
                @Html.ValidationMessageFor(t => t.PostCode, null, new { @class = "help-block" })
            </div>
        </div>
    </div>
</div>

<div class="form-group @if (!ViewData.ModelState.IsValidField("Town")) { @Html.Raw("has-error") ; }">
    @Html.LabelFor(t => t.Town, new { @class = "col-sm-2 control-label" })
    <div class="col-sm-10 controls">
        <div class="row">
            <div class="col-sm-8">
                @Html.TextBoxFor(t => t.Town, new { @class = "form-control" })
            </div>
            <div class="col-sm-4">
                @Html.ValidationMessageFor(t => t.Town, null, new { @class = "help-block" })
            </div>
        </div>
    </div>
</div>

<div class="form-group @if (!ViewData.ModelState.IsValidField("Tel")) { @Html.Raw("has-error") ; }">
    @Html.LabelFor(t => t.Tel, new { @class = "col-sm-2 control-label" })
    <div class="col-sm-10 controls">
        <div class="row">
            <div class="col-sm-8">
                @Html.TextBoxFor(t => t.Tel, new { @class = "form-control" })
            </div>
            <div class="col-sm-4">
                @Html.ValidationMessageFor(t => t.Tel, null, new { @class = "help-block" })
            </div>
        </div>
    </div>
</div>

<div class="form-group @if (!ViewData.ModelState.IsValidField("Mail")) { @Html.Raw("has-error") ; }">
    @Html.LabelFor(t => t.Mail, new { @class = "col-sm-2 control-label" })
    <div class="col-sm-10 controls">
        <div class="row">
            <div class="col-sm-8">
                @Html.TextBoxFor(t => t.Mail, new { @class = "form-control" })
            </div>
            <div class="col-sm-4">
                @Html.ValidationMessageFor(t => t.Mail, null, new { @class = "help-block" })
            </div>
        </div>
    </div>
</div>

<div class="form-group @if (!ViewData.ModelState.IsValidField("Comment")) { @Html.Raw("has-error") ; }">
    @Html.LabelFor(t => t.Comment, new { @class = "col-sm-2 control-label" })
    <div class="col-sm-10 controls">
        <div class="row">
            <div class="col-sm-8">
                @Html.TextBoxFor(t => t.Comment, new { @class = "form-control" })
            </div>
            <div class="col-sm-4">
                @Html.ValidationMessageFor(t => t.Comment, null, new { @class = "help-block" })
            </div>
        </div>
    </div>
</div>
<div class="form-group">
    <div class="col-sm-offset-2 col-sm-10">
        <input type="submit" value="Create" class="btn btn-primary" />
    </div>
</div>
@{Html.EndForm();}
